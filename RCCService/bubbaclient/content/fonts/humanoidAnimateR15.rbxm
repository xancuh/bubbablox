<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="LocalScript" referent="RBX6FAEF2BC81AC4B2A86AB109BC483D22E">
		<Properties>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">Animate</string>
			<ProtectedString name="Source"><![CDATA[function   waitForChild(parent, childName)
	local child = parent:findFirstChild(childName)
	if child then return child end
	while true do
		child = parent.ChildAdded:wait()
		if child.Name==childName then return child end
	end
end

local Figure = script.Parent
local Humanoid = waitForChild(Figure, "Humanoid")
local pose = "Standing"

local currentAnim = ""
local currentAnimInstance = nil
local currentAnimTrack = nil
local currentAnimKeyframeHandler = nil
local currentAnimSpeed = 1.0
local animTable = {}
local animNames = { 
	idle = 	{	
				{ id = "rbxasset://R15021216/idle_stretch.xml", weight = 1 },
				{ id = "rbxasset://R15021216/idle_look.xml", weight = 1 },
				{ id = "rbxasset://R15021216/idle.xml", weight = 9 }
			},
	walk = 	{ 	
				{ id = "rbxasset://R15021216/run.xml", weight = 10 } 
			}, 
	run = 	{
				{ id = "rbxasset://R15021216/run.xml", weight = 10 } 
			}, 
	jump = 	{
				{ id = "rbxasset://R15021216/jump.xml", weight = 10 } 
			}, 
	fall = 	{
				{ id = "rbxasset://R15021216/falling.xml", weight = 10 } 
			}, 
	climb = {
				{ id = "rbxasset://R15021216/climb.xml", weight = 10 } 
			}, 
	sit = 	{
				{ id = "http://www.roblox.com/asset/?id=434419018", weight = 10 } 
			},	
	toolnone = {
				{ id = "http://www.roblox.com/asset/?id=434419638", weight = 10 } 
			},
	toolslash = {
				{ id = "http://www.roblox.com/asset/?id=434419638", weight = 10 } 
--				{ id = "slash.xml", weight = 10 } 
			},
	toollunge = {
				{ id = "http://www.roblox.com/asset/?id=434419638", weight = 10 } 
			},
	wave = {
				{ id = "http://www.roblox.com/asset/?id=434420105", weight = 10 } 
			},
	point = {
				{ id = "http://www.roblox.com/asset/?id=434420378", weight = 10 } 
			},
	dance = {
				{ id = "http://www.roblox.com/asset/?id=434422187", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434422809", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434423133", weight = 10 } 
			},
	dance2 = {
				{ id = "http://www.roblox.com/asset/?id=434423431", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434424210", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434424519", weight = 10 } 
			},
	dance3 = {
				{ id = "http://www.roblox.com/asset/?id=434424825", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434425108", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=434425599", weight = 10 } 
			},
	laugh = {
				{ id = "http://www.roblox.com/asset/?id=434421799", weight = 10 } 
			},
	cheer = {
				{ id = "http://www.roblox.com/asset/?id=434421226", weight = 10 } 
			},
}

-- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
local emoteNames = { wave = false, point = false, dance = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

math.randomseed(tick())

function configureAnimationSet(name, fileList)
	if (animTable[name] ~= nil) then
		for _, connection in pairs(animTable[name].connections) do
			connection:disconnect()
		end
	end
	animTable[name] = {}
	animTable[name].count = 0
	animTable[name].totalWeight = 0	
	animTable[name].connections = {}

	-- check for config values
	local config = script:FindFirstChild(name)
	if (config ~= nil) then
--		print("Loading anims " .. name)
		table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
		table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
		local idx = 1
		for _, childPart in pairs(config:GetChildren()) do
			if (childPart:IsA("Animation")) then
				table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
				animTable[name][idx] = {}
				animTable[name][idx].anim = childPart
				local weightObject = childPart:FindFirstChild("Weight")
				if (weightObject == nil) then
					animTable[name][idx].weight = 1
				else
					animTable[name][idx].weight = weightObject.Value
				end
				animTable[name].count = animTable[name].count + 1
				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
	--			print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
				idx = idx + 1
			end
		end
	end

	-- fallback to defaults
	if (animTable[name].count <= 0) then
		for idx, anim in pairs(fileList) do
			animTable[name][idx] = {}
			animTable[name][idx].anim = Instance.new("Animation")
			animTable[name][idx].anim.Name = name
			animTable[name][idx].anim.AnimationId = anim.id
			animTable[name][idx].weight = anim.weight
			animTable[name].count = animTable[name].count + 1
			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
--			print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
		end
	end
end

-- Setup animation objects
function scriptChildModified(child)
	local fileList = animNames[child.Name]
	if (fileList ~= nil) then
		configureAnimationSet(child.Name, fileList)
	end	
end

script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)


for name, fileList in pairs(animNames) do 
	configureAnimationSet(name, fileList)
end	

-- ANIMATION

-- declarations
local toolAnim = "None"
local toolAnimTime = 0

local jumpAnimTime = 0
local jumpAnimDuration = 0.31

local toolTransitionTime = 0.1
local fallTransitionTime = 0.2

-- functions

function stopAllAnimations()
	local oldAnim = currentAnim

	-- return to idle if finishing an emote
	if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
		oldAnim = "idle"
	end

	currentAnim = ""
	currentAnimInstance = nil
	if (currentAnimKeyframeHandler ~= nil) then
		currentAnimKeyframeHandler:disconnect()
	end

	if (currentAnimTrack ~= nil) then
		currentAnimTrack:Stop()
		currentAnimTrack:Destroy()
		currentAnimTrack = nil
	end
	return oldAnim
end

function setAnimationSpeed(speed)
	if speed ~= currentAnimSpeed then
		currentAnimSpeed = speed
		currentAnimTrack:AdjustSpeed(currentAnimSpeed)
	end
end

function keyFrameReachedFunc(frameName)
	if (frameName == "End") then
--		print("Keyframe : ".. frameName)

		local repeatAnim = currentAnim
		-- return to idle if finishing an emote
		if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
			repeatAnim = "idle"
		end
		
		local animSpeed = currentAnimSpeed
		playAnimation(repeatAnim, 0.15, Humanoid)
		setAnimationSpeed(animSpeed)
	end
end

-- Preload animations
function playAnimation(animName, transitionTime, humanoid) 
		
	local roll = math.random(1, animTable[animName].totalWeight) 
	local origRoll = roll
	local idx = 1
	while (roll > animTable[animName][idx].weight) do
		roll = roll - animTable[animName][idx].weight
		idx = idx + 1
	end
	
--	print(animName .. " " .. idx .. " [" .. origRoll .. "]")
	
	local anim = animTable[animName][idx].anim

	-- switch animation		
	if (anim ~= currentAnimInstance) then
		
		if (currentAnimTrack ~= nil) then
			currentAnimTrack:Stop(transitionTime)
			currentAnimTrack:Destroy()
		end

		currentAnimSpeed = 1.0
	
		-- load it to the humanoid; get AnimationTrack
		currentAnimTrack = humanoid:LoadAnimation(anim)
		 
		-- play the animation
		currentAnimTrack:Play(transitionTime)
		currentAnim = animName
		currentAnimInstance = anim

		-- set up keyframe name triggers
		if (currentAnimKeyframeHandler ~= nil) then
			currentAnimKeyframeHandler:disconnect()
		end
		currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
		
	end

end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

local toolAnimName = ""
local toolAnimTrack = nil
local toolAnimInstance = nil
local currentToolAnimKeyframeHandler = nil

function toolKeyFrameReachedFunc(frameName)
	if (frameName == "End") then
--		print("Keyframe : ".. frameName)	
		playToolAnimation(toolAnimName, 0.0, Humanoid)
	end
end


function playToolAnimation(animName, transitionTime, humanoid)	 
		
		local roll = math.random(1, animTable[animName].totalWeight) 
		local origRoll = roll
		local idx = 1
		while (roll > animTable[animName][idx].weight) do
			roll = roll - animTable[animName][idx].weight
			idx = idx + 1
		end
--		print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
		local anim = animTable[animName][idx].anim

		if (toolAnimInstance ~= anim) then
			
			if (toolAnimTrack ~= nil) then
				toolAnimTrack:Stop()
				toolAnimTrack:Destroy()
				transitionTime = 0
			end
					
			-- load it to the humanoid; get AnimationTrack
			toolAnimTrack = humanoid:LoadAnimation(anim)
			 
			-- play the animation
			toolAnimTrack:Play(transitionTime)
			toolAnimName = animName
			toolAnimInstance = anim

			currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
		end
end

function stopToolAnimations()
	local oldAnim = toolAnimName

	if (currentToolAnimKeyframeHandler ~= nil) then
		currentToolAnimKeyframeHandler:disconnect()
	end

	toolAnimName = ""
	toolAnimInstance = nil
	if (toolAnimTrack ~= nil) then
		toolAnimTrack:Stop()
		toolAnimTrack:Destroy()
		toolAnimTrack = nil
	end


	return oldAnim
end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


function onRunning(speed)
	if speed>0.01 then
		local scale = 15.0
		playAnimation("walk", 0.1, Humanoid)
		setAnimationSpeed(speed / scale)
		pose = "Running"
	else
		playAnimation("idle", 0.1, Humanoid)
		pose = "Standing"
	end
end

function onDied()
	pose = "Dead"
end

function onJumping()
	playAnimation("jump", 0.1, Humanoid)
	jumpAnimTime = jumpAnimDuration
	pose = "Jumping"
end

function onClimbing(speed)
	local scale = 2.0
	playAnimation("climb", 0.1, Humanoid)
	setAnimationSpeed(speed / scale)
	pose = "Climbing"
end

function onGettingUp()
	pose = "GettingUp"
end

function onFreeFall()
	if (jumpAnimTime <= 0) then
		playAnimation("fall", fallTransitionTime, Humanoid)
	end
	pose = "FreeFall"
end

function onFallingDown()
	pose = "FallingDown"
end

function onSeated()
	pose = "Seated"
end

function onPlatformStanding()
	pose = "PlatformStanding"
end

function onSwimming(speed)
	if speed>0 then
		pose = "Running"
	else
		pose = "Standing"
	end
end

function getTool()	
	for _, kid in ipairs(Figure:GetChildren()) do
		if kid.className == "Tool" then return kid end
	end
	return nil
end

function getToolAnim(tool)
	for _, c in ipairs(tool:GetChildren()) do
		if c.Name == "toolanim" and c.className == "StringValue" then
			return c
		end
	end
	return nil
end

function animateTool()
	
	if (toolAnim == "None") then
		playToolAnimation("toolnone", toolTransitionTime, Humanoid)
		return
	end

	if (toolAnim == "Slash") then
		playToolAnimation("toolslash", 0, Humanoid)
		return
	end

	if (toolAnim == "Lunge") then
		playToolAnimation("toollunge", 0, Humanoid)
		return
	end
end

function moveSit()
	RightShoulder.MaxVelocity = 0.15
	LeftShoulder.MaxVelocity = 0.15
	RightShoulder:SetDesiredAngle(3.14 /2)
	LeftShoulder:SetDesiredAngle(-3.14 /2)
	RightHip:SetDesiredAngle(3.14 /2)
	LeftHip:SetDesiredAngle(-3.14 /2)
end

local lastTick = 0

function move(time)
	local amplitude = 1
	local frequency = 1
  	local deltaTime = time - lastTick
  	lastTick = time

	local climbFudge = 0
	local setAngles = false

  	if (jumpAnimTime > 0) then
  		jumpAnimTime = jumpAnimTime - deltaTime
  	end

	if (pose == "FreeFall" and jumpAnimTime <= 0) then
		playAnimation("fall", fallTransitionTime, Humanoid)
	elseif (pose == "Seated") then
		playAnimation("sit", 0.5, Humanoid)
		return
	elseif (pose == "Running") then
		playAnimation("walk", 0.1, Humanoid)
	elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
		stopAllAnimations()
		amplitude = 0.1
		frequency = 1
		setAngles = true
	end

	-- Tool Animation handling
	local tool = getTool()
	if tool then
	
		animStringValueObject = getToolAnim(tool)

		if animStringValueObject then
			toolAnim = animStringValueObject.Value
			-- message recieved, delete StringValue
			animStringValueObject.Parent = nil
			toolAnimTime = time + .3
		end

		if time > toolAnimTime then
			toolAnimTime = 0
			toolAnim = "None"
		end

		animateTool()		
	else
		stopToolAnimations()
		toolAnim = "None"
		toolAnimInstance = nil
		toolAnimTime = 0
	end
end

-- connect events
Humanoid.Died:connect(onDied)
Humanoid.Running:connect(onRunning)
Humanoid.Jumping:connect(onJumping)
Humanoid.Climbing:connect(onClimbing)
Humanoid.GettingUp:connect(onGettingUp)
Humanoid.FreeFalling:connect(onFreeFall)
Humanoid.FallingDown:connect(onFallingDown)
Humanoid.Seated:connect(onSeated)
Humanoid.PlatformStanding:connect(onPlatformStanding)
Humanoid.Swimming:connect(onSwimming)

-- setup emote chat hook
Game.Players.LocalPlayer.Chatted:connect(function(msg)
	local emote = ""
	if (string.sub(msg, 1, 3) == "/e ") then
		emote = string.sub(msg, 4)
	elseif (string.sub(msg, 1, 7) == "/emote ") then
		emote = string.sub(msg, 8)
	end
	
	if (pose == "Standing" and emoteNames[emote] ~= nil) then
		playAnimation(emote, 0.1, Humanoid)
	end
--	print("===> " .. string.sub(msg, 1, 3) .. "(" .. emote .. ")")
end)


-- main program

local runService = game:service("RunService");

-- print("bottom")

-- initialize to idle
playAnimation("idle", 0.1, Humanoid)
pose = "Standing"

while Figure.Parent~=nil do
	local _, time = wait(0.1)
	move(time)
end


]]></ProtectedString>
		</Properties>
		<Item class="StringValue" referent="RBX46E2E332A429402F82B8165A9C0274B5">
			<Properties>
				<string name="Name">climb</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX86915EC08DCE4F59ACD120FD238F349A">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434415851</url></Content>
					<string name="Name">ClimbAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBX7A1F8B88C13549A5AF2CBF28C9EF4611">
			<Properties>
				<string name="Name">fall</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX6EC39B2515BB452D84D31E6CF36ACFDB">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434418643</url></Content>
					<string name="Name">FallAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBXC26C332F48294D14897B7BB010302641">
			<Properties>
				<string name="Name">idle</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBXDF0B3CD69EE54DA1B7B732D9B92C3FAB">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434416649</url></Content>
					<string name="Name">Animation1</string>
				</Properties>
				<Item class="NumberValue" referent="RBX61087E7864744B418198C8290A603722">
					<Properties>
						<string name="Name">Weight</string>
						<double name="Value">9</double>
					</Properties>
				</Item>
			</Item>
			<Item class="Animation" referent="RBX3BC5344B91AB441F9CFE58BDD1A8DC6A">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434417169</url></Content>
					<string name="Name">Animation2</string>
				</Properties>
				<Item class="NumberValue" referent="RBXDD7D9684AACE428B905F512A95F5ADAA">
					<Properties>
						<string name="Name">Weight</string>
						<double name="Value">1</double>
					</Properties>
				</Item>
			</Item>
			<Item class="Animation" referent="RBXAF93B9583F91430DA4CC77653CB25B25">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434417655</url></Content>
					<string name="Name">Animation3</string>
				</Properties>
				<Item class="NumberValue" referent="RBX8F359BD385614039BCCD8BA3195A33C6">
					<Properties>
						<string name="Name">Weight</string>
						<double name="Value">1</double>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBXFF6E3B718B0748CEBC9263C1E5F29A50">
			<Properties>
				<string name="Name">jump</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX606D26FE17D343DFB970F328093A7BBC">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434415339</url></Content>
					<string name="Name">JumpAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBX0ABEAC8348CA49D0B7C7B996BE8538E8">
			<Properties>
				<string name="Name">run</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX2E15FFA1141F46E49B530ADEEBF24EEE">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434418038</url></Content>
					<string name="Name">RunAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBX4F16A850E4334F29A5A17E6E1C0B3721">
			<Properties>
				<string name="Name">sit</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX91144ECEDB034748B333C8621651A523">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434419018</url></Content>
					<string name="Name">SitAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBXAD10A4020BA64B93AFC152DA9195F531">
			<Properties>
				<string name="Name">toolnone</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBX0A920533C1844D779D82A499930C6B10">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=434419638</url></Content>
					<string name="Name">ToolNoneAnim</string>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBX3F4DCB146EB642F7B866DE4B65DDFD7A">
			<Properties>
				<string name="Name">walk</string>
				<string name="Value"></string>
			</Properties>
			<Item class="Animation" referent="RBXCECB9B1E254F4A7293C0327AB396AA27">
				<Properties>
					<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=387947975</url></Content>
					<string name="Name">WalkAnim</string>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>